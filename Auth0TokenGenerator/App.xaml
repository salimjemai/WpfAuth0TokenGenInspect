<Application x:Class="Auth0TokenGenerator.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Auth0TokenGenerator"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <SolidColorBrush x:Key="TextBox.Static.Border"    Color="#FFABAdB3" />
        <SolidColorBrush x:Key="TextBox.MouseOver.Border"   Color="RED" />
        <SolidColorBrush x:Key="TextBox.Focus.Border"  Color="#FF569DE5" />

        <!--TextBox style 1 -->
        <Style x:Key="TextBoxStyle1"     TargetType="{x:Type TextBox}">
            <Setter Property="Background"  Value="white"/>
            <!--Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"-->
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
            <Setter Property="Width" Value="330" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="AllowDrop" Value="true" />
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <Border x:Name="border"  CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                                <Grid>
                                    <ScrollViewer x:Name="PART_ContentHost"  Focusable="false"  HorizontalScrollBarVisibility="Hidden"  VerticalScrollBarVisibility="Hidden" />

                                    <TextBox Text="{Binding Path=Text,  RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                             x:Name="textSource"  Background="Transparent"  Panel.ZIndex="2" BorderBrush="Transparent"/>
                                    <TextBox Text="{TemplateBinding Tag}" Background="{TemplateBinding Background}" Panel.ZIndex="1">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}">
                                                <Setter Property="Foreground" Value="Transparent" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                                        <Setter Property="Foreground" Value="Gray"/>
                                                        <Setter Property="FontSize" Value="15" />
                                                        <Setter Property="BorderBrush" Value="Transparent" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </Grid>
                            </Border>                            
                        </Grid>
                        <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled"  Value="false">
                                    <Setter Property="Opacity"  TargetName="border" Value="0.56" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border"  Value="{StaticResource TextBox.MouseOver.Border}" />
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused"   Value="true">
                                    <Setter Property="BorderBrush"   TargetName="border" Value="{StaticResource TextBox.Focus.Border}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                        <Condition Property="IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <!--TextBox style 2 -->
        <Style x:Key="TextBoxStyle2" TargetType="{x:Type TextBox}">
            <Setter Property="Background"    Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="BorderBrush"    Value="{StaticResource TextBox.Static.Border}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="AllowDrop" Value="true" />
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border"
                            CornerRadius="5"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True" Margin="-27,0,0,0">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost"
                                              Focusable="false"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Hidden" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled"  Value="false">
                                <Setter Property="Opacity"  TargetName="border" Value="0.56" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border"  Value="{StaticResource TextBox.MouseOver.Border}" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused"   Value="true">
                                <Setter Property="BorderBrush"   TargetName="border" Value="{StaticResource TextBox.Focus.Border}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                        <Condition Property="IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>


        
        <!-- button style-->
        <Style x:Key="FocusVisual1">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2"
                                     StrokeDashArray="1 2"
                                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                     SnapsToDevicePixels="true"
                                     StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background1" Color="Navy" />
        <SolidColorBrush x:Key="Button.Static.Border1" Color="#FF707070" />
        <SolidColorBrush x:Key="Button.MouseOver.Background1" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.MouseOver.Border1" Color="#FF3C7FB1" />
        <SolidColorBrush x:Key="Button.Pressed.Background1"  Color="#FFC4E5F6" />
        <SolidColorBrush x:Key="Button.Pressed.Border1" Color="#FF2C628B" />
        <SolidColorBrush x:Key="Button.Disabled.Background1" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border1" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground1" Color="#FF838383" />
        
        <Style x:Key="ButtonStyle1"    TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle"    Value="{StaticResource FocusVisual1}" />
            <Setter Property="Background"    Value="{StaticResource Button.Static.Background1}" />
            <Setter Property="BorderBrush"    Value="{StaticResource Button.Static.Border1}" />
            <Setter Property="Foreground"    Value="White" />
            <!--Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"-->
            <Setter Property="BorderThickness"            Value="0" />
            <Setter Property="HorizontalContentAlignment"            Value="Center" />
            <Setter Property="VerticalContentAlignment"            Value="Center" />
            <Setter Property="Padding"            Value="1" />
            <Setter Property="Width" Value="130" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"
                            CornerRadius="8"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter"        
                                          Focusable="False"        
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=GenToken, UpdateSourceTrigger=PropertyChanged}"  Value="0">
                                <Setter Property="IsEnabled"   Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=GetPreviousToken, UpdateSourceTrigger=PropertyChanged}"   Value="0">
                                <Setter Property="IsEnabled"    Value="False" />
                            </DataTrigger>
                            <Trigger Property="IsDefaulted"   Value="true">
                                <Setter Property="BorderBrush"  TargetName="border"  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver"    Value="true">
                                <Setter Property="Background"  TargetName="border"  Value="#EAB01E" />
                                <Setter Property="BorderBrush" TargetName="border"  Value="#EAB01E" />
                                <Setter Property="Foreground" Value="Navy" />
                            </Trigger>
                            <Trigger Property="IsPressed"  Value="true">
                                <Setter Property="Background"  TargetName="border"  Value="#F1CA68" />
                                <Setter Property="BorderBrush"  TargetName="border"  Value="#F1CA68" />
                            </Trigger>
                            <Trigger Property="IsEnabled"  Value="false">
                                <Setter Property="Background" TargetName="border"  Value="{StaticResource Button.Disabled.Background1}" />
                                <Setter Property="BorderBrush" Value="{StaticResource Button.Disabled.Border1}" />
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter"  Value="{StaticResource Button.Disabled.Foreground1}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Text placeholder style-->
        <!--<Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <TextBox Text="{Binding Path=Text,
                                                RelativeSource={RelativeSource TemplatedParent}, 
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"
                                 x:Name="textSource" 
                                 Background="Transparent" 
                                 Panel.ZIndex="2" />
                            <TextBox Text="{TemplateBinding Tag}" Background="{TemplateBinding Background}" Panel.ZIndex="1">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}">
                                        <Setter Property="Foreground" Value="Transparent"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                                <Setter Property="Foreground" Value="LightGray"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->

        <!--button style Token screen-->
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2"
                             StrokeDashArray="1 2"
                             Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                             SnapsToDevicePixels="true"
                             StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Enabled.Foreground" Color="White" />
        <SolidColorBrush x:Key="Button.Static.Background" Color="Navy" />
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070" />
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="Navy" />
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1" />
        <SolidColorBrush x:Key="Button.Pressed.Background"  Color="#FFC4E5F6" />
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />

        <Style x:Key="ButtonStyle2"    TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle"    Value="{StaticResource FocusVisual}" />
            <Setter Property="Background"    Value="Navy"/>
            <Setter Property="BorderBrush"    Value="Gray" />
            <Setter Property="Foreground"    Value="White" />
            <Setter Property="BorderThickness"            Value="0" />
            <Setter Property="HorizontalContentAlignment"            Value="Center" />
            <Setter Property="VerticalContentAlignment"            Value="Center" />
            <Setter Property="Padding"            Value="1" />
            <Setter Property="Width" Value="70" />
            <Setter Property="Height" Value="25" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"
                                CornerRadius="8"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter"        
                              Focusable="False"        
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=CopyAccess, UpdateSourceTrigger=PropertyChanged}"  Value="0">
                                <Setter Property="IsEnabled"   Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=InspectAccess, UpdateSourceTrigger=PropertyChanged}"   Value="0">
                                <Setter Property="IsEnabled"    Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=CopyId, UpdateSourceTrigger=PropertyChanged}"  Value="0">
                                <Setter Property="IsEnabled"   Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=InspectId, UpdateSourceTrigger=PropertyChanged}"   Value="0">
                                <Setter Property="IsEnabled"    Value="False" />
                            </DataTrigger>
                            <Trigger Property="IsDefaulted"   Value="true">
                                <Setter Property="BorderBrush"  TargetName="border"  Value="white" />
                            </Trigger>
                            <Trigger Property="IsMouseOver"    Value="true">
                                <Setter Property="Background"  TargetName="border"  Value="#EAB01E" />
                                <Setter Property="BorderBrush" TargetName="border"  Value="#EAB01E" />
                                <Setter Property="Foreground" Value="Navy" />
                            </Trigger>
                            <Trigger Property="IsPressed"  Value="true">
                                <Setter Property="Background"  TargetName="border"  Value="#F1CA68" />
                                <Setter Property="BorderBrush"  TargetName="border"  Value="#F1CA68" />
                            </Trigger>
                            <Trigger Property="IsEnabled"  Value="false">
                                <Setter Property="Background" TargetName="border"  Value="White" />
                                <Setter Property="BorderBrush" Value="LightGray" />
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter"  Value="DarkGray" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        
        <!--Purge Database-->
        <Style x:Key="FocusVisual3">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2"
                             StrokeDashArray="1 2"
                             Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                             SnapsToDevicePixels="true"
                             StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Enabled.Foreground3" Color="White" />
        <SolidColorBrush x:Key="Button.Static.Background3" Color="Navy" />
        <SolidColorBrush x:Key="Button.Static.Border3" Color="#FF707070" />
        <SolidColorBrush x:Key="Button.MouseOver.Background3" Color="Navy" />
        <SolidColorBrush x:Key="Button.MouseOver.Border3" Color="#FF3C7FB1" />
        <SolidColorBrush x:Key="Button.Pressed.Background3"  Color="#FFC4E5F6" />
        <SolidColorBrush x:Key="Button.Pressed.Border3" Color="#FF2C628B" />
        <SolidColorBrush x:Key="Button.Disabled.Background3" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border3" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground3" Color="#FF838383" />

        <Style x:Key="PurgeDatabaseButtonStyle"    TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle"    Value="{StaticResource FocusVisual3}" />
            <Setter Property="Background"    Value="Navy"/>
            <Setter Property="BorderBrush"    Value="Gray" />
            <Setter Property="Foreground"    Value="LightGray" />
            <Setter Property="FontWeight"    Value="Bold" />
            <Setter Property="BorderThickness"            Value="0" />
            <Setter Property="HorizontalContentAlignment"            Value="Center" />
            <Setter Property="VerticalContentAlignment"            Value="Center" />
            <Setter Property="Padding"            Value="1" />
            <Setter Property="Width" Value="70" />
            <Setter Property="Height" Value="25" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"
                                CornerRadius="8"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter"        
                              Focusable="False"        
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=CopyAccess, UpdateSourceTrigger=PropertyChanged}"  Value="0">
                                <Setter Property="IsEnabled"   Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=InspectAccess, UpdateSourceTrigger=PropertyChanged}"   Value="0">
                                <Setter Property="IsEnabled"    Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=CopyId, UpdateSourceTrigger=PropertyChanged}"  Value="0">
                                <Setter Property="IsEnabled"   Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text.Length, ElementName=InspectId, UpdateSourceTrigger=PropertyChanged}"   Value="0">
                                <Setter Property="IsEnabled"    Value="False" />
                            </DataTrigger>
                            <Trigger Property="IsDefaulted"   Value="true">
                                <Setter Property="BorderBrush"  TargetName="border"  Value="white" />
                            </Trigger>
                            <Trigger Property="IsMouseOver"    Value="true">
                                <Setter Property="Background"  TargetName="border"  Value="red" />
                                <Setter Property="BorderBrush" TargetName="border"  Value="red" />
                                <Setter Property="Foreground" Value="White" />
                                <Setter Property="FontWeight" Value="Bold" />
                            </Trigger>
                            <Trigger Property="IsPressed"  Value="true">
                                <Setter Property="Background"  TargetName="border"  Value="#F1CA68" />
                                <Setter Property="BorderBrush"  TargetName="border"  Value="#F1CA68" />
                            </Trigger>
                            <Trigger Property="IsEnabled"  Value="false">
                                <Setter Property="Background" TargetName="border"  Value="White" />
                                <Setter Property="BorderBrush" Value="LightGray" />
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter"  Value="DarkGray" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Treeview style-->
        <Style TargetType="{x:Type TreeViewItem}">
            <Setter Property="IsExpanded" Value="True" />
        </Style>
        

        <!--MainWindow-->
        <!--<Style TargetType="{x:Type Window}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"  CornerRadius="8"  SnapsToDevicePixels="true">
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->

    </Application.Resources>
</Application>
